// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: proto/person_service.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PersonService_CreateTransportUnit_FullMethodName    = "/main.PersonService/CreateTransportUnit"
	PersonService_AlterTransportUnit_FullMethodName     = "/main.PersonService/AlterTransportUnit"
	PersonService_GetAllTransportUnits_FullMethodName   = "/main.PersonService/GetAllTransportUnits"
	PersonService_GetFilteredPersons_FullMethodName     = "/main.PersonService/GetFilteredPersons"
	PersonService_GetFilteredRepairWorks_FullMethodName = "/main.PersonService/GetFilteredRepairWorks"
	PersonService_AlterRepairWork_FullMethodName        = "/main.PersonService/AlterRepairWork"
	PersonService_CreateRepairWork_FullMethodName       = "/main.PersonService/CreateRepairWork"
	PersonService_GetAllRepairWorks_FullMethodName      = "/main.PersonService/GetAllRepairWorks"
	PersonService_CreateBrigade_FullMethodName          = "/main.PersonService/CreateBrigade"
	PersonService_AlterBrigade_FullMethodName           = "/main.PersonService/AlterBrigade"
	PersonService_GetAllBrigades_FullMethodName         = "/main.PersonService/GetAllBrigades"
	PersonService_CreatePerson_FullMethodName           = "/main.PersonService/CreatePerson"
	PersonService_AlterPerson_FullMethodName            = "/main.PersonService/AlterPerson"
	PersonService_GetAllPersons_FullMethodName          = "/main.PersonService/GetAllPersons"
)

// PersonServiceClient is the client API for PersonService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PersonServiceClient interface {
	CreateTransportUnit(ctx context.Context, in *TransportUnit, opts ...grpc.CallOption) (*TransportUnit, error)
	AlterTransportUnit(ctx context.Context, in *TransportUnit, opts ...grpc.CallOption) (*TransportUnit, error)
	GetAllTransportUnits(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TransportUnitList, error)
	GetFilteredPersons(ctx context.Context, in *PersonFilter, opts ...grpc.CallOption) (*PersonList, error)
	GetFilteredRepairWorks(ctx context.Context, in *PersonFilter, opts ...grpc.CallOption) (*RepairWorkList, error)
	AlterRepairWork(ctx context.Context, in *RepairWork, opts ...grpc.CallOption) (*RepairWork, error)
	CreateRepairWork(ctx context.Context, in *RepairWork, opts ...grpc.CallOption) (*RepairWork, error)
	GetAllRepairWorks(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RepairWorkList, error)
	CreateBrigade(ctx context.Context, in *Brigade, opts ...grpc.CallOption) (*Brigade, error)
	AlterBrigade(ctx context.Context, in *Brigade, opts ...grpc.CallOption) (*Brigade, error)
	GetAllBrigades(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BrigadeList, error)
	CreatePerson(ctx context.Context, in *Person, opts ...grpc.CallOption) (*Person, error)
	AlterPerson(ctx context.Context, in *Person, opts ...grpc.CallOption) (*Person, error)
	GetAllPersons(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PersonList, error)
}

type personServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPersonServiceClient(cc grpc.ClientConnInterface) PersonServiceClient {
	return &personServiceClient{cc}
}

func (c *personServiceClient) CreateTransportUnit(ctx context.Context, in *TransportUnit, opts ...grpc.CallOption) (*TransportUnit, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransportUnit)
	err := c.cc.Invoke(ctx, PersonService_CreateTransportUnit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personServiceClient) AlterTransportUnit(ctx context.Context, in *TransportUnit, opts ...grpc.CallOption) (*TransportUnit, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransportUnit)
	err := c.cc.Invoke(ctx, PersonService_AlterTransportUnit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personServiceClient) GetAllTransportUnits(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TransportUnitList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransportUnitList)
	err := c.cc.Invoke(ctx, PersonService_GetAllTransportUnits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personServiceClient) GetFilteredPersons(ctx context.Context, in *PersonFilter, opts ...grpc.CallOption) (*PersonList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PersonList)
	err := c.cc.Invoke(ctx, PersonService_GetFilteredPersons_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personServiceClient) GetFilteredRepairWorks(ctx context.Context, in *PersonFilter, opts ...grpc.CallOption) (*RepairWorkList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RepairWorkList)
	err := c.cc.Invoke(ctx, PersonService_GetFilteredRepairWorks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personServiceClient) AlterRepairWork(ctx context.Context, in *RepairWork, opts ...grpc.CallOption) (*RepairWork, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RepairWork)
	err := c.cc.Invoke(ctx, PersonService_AlterRepairWork_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personServiceClient) CreateRepairWork(ctx context.Context, in *RepairWork, opts ...grpc.CallOption) (*RepairWork, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RepairWork)
	err := c.cc.Invoke(ctx, PersonService_CreateRepairWork_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personServiceClient) GetAllRepairWorks(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RepairWorkList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RepairWorkList)
	err := c.cc.Invoke(ctx, PersonService_GetAllRepairWorks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personServiceClient) CreateBrigade(ctx context.Context, in *Brigade, opts ...grpc.CallOption) (*Brigade, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Brigade)
	err := c.cc.Invoke(ctx, PersonService_CreateBrigade_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personServiceClient) AlterBrigade(ctx context.Context, in *Brigade, opts ...grpc.CallOption) (*Brigade, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Brigade)
	err := c.cc.Invoke(ctx, PersonService_AlterBrigade_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personServiceClient) GetAllBrigades(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BrigadeList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BrigadeList)
	err := c.cc.Invoke(ctx, PersonService_GetAllBrigades_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personServiceClient) CreatePerson(ctx context.Context, in *Person, opts ...grpc.CallOption) (*Person, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Person)
	err := c.cc.Invoke(ctx, PersonService_CreatePerson_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personServiceClient) AlterPerson(ctx context.Context, in *Person, opts ...grpc.CallOption) (*Person, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Person)
	err := c.cc.Invoke(ctx, PersonService_AlterPerson_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personServiceClient) GetAllPersons(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PersonList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PersonList)
	err := c.cc.Invoke(ctx, PersonService_GetAllPersons_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PersonServiceServer is the server API for PersonService service.
// All implementations must embed UnimplementedPersonServiceServer
// for forward compatibility.
type PersonServiceServer interface {
	CreateTransportUnit(context.Context, *TransportUnit) (*TransportUnit, error)
	AlterTransportUnit(context.Context, *TransportUnit) (*TransportUnit, error)
	GetAllTransportUnits(context.Context, *emptypb.Empty) (*TransportUnitList, error)
	GetFilteredPersons(context.Context, *PersonFilter) (*PersonList, error)
	GetFilteredRepairWorks(context.Context, *PersonFilter) (*RepairWorkList, error)
	AlterRepairWork(context.Context, *RepairWork) (*RepairWork, error)
	CreateRepairWork(context.Context, *RepairWork) (*RepairWork, error)
	GetAllRepairWorks(context.Context, *emptypb.Empty) (*RepairWorkList, error)
	CreateBrigade(context.Context, *Brigade) (*Brigade, error)
	AlterBrigade(context.Context, *Brigade) (*Brigade, error)
	GetAllBrigades(context.Context, *emptypb.Empty) (*BrigadeList, error)
	CreatePerson(context.Context, *Person) (*Person, error)
	AlterPerson(context.Context, *Person) (*Person, error)
	GetAllPersons(context.Context, *emptypb.Empty) (*PersonList, error)
	mustEmbedUnimplementedPersonServiceServer()
}

// UnimplementedPersonServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPersonServiceServer struct{}

func (UnimplementedPersonServiceServer) CreateTransportUnit(context.Context, *TransportUnit) (*TransportUnit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransportUnit not implemented")
}
func (UnimplementedPersonServiceServer) AlterTransportUnit(context.Context, *TransportUnit) (*TransportUnit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterTransportUnit not implemented")
}
func (UnimplementedPersonServiceServer) GetAllTransportUnits(context.Context, *emptypb.Empty) (*TransportUnitList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTransportUnits not implemented")
}
func (UnimplementedPersonServiceServer) GetFilteredPersons(context.Context, *PersonFilter) (*PersonList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilteredPersons not implemented")
}
func (UnimplementedPersonServiceServer) GetFilteredRepairWorks(context.Context, *PersonFilter) (*RepairWorkList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilteredRepairWorks not implemented")
}
func (UnimplementedPersonServiceServer) AlterRepairWork(context.Context, *RepairWork) (*RepairWork, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterRepairWork not implemented")
}
func (UnimplementedPersonServiceServer) CreateRepairWork(context.Context, *RepairWork) (*RepairWork, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRepairWork not implemented")
}
func (UnimplementedPersonServiceServer) GetAllRepairWorks(context.Context, *emptypb.Empty) (*RepairWorkList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllRepairWorks not implemented")
}
func (UnimplementedPersonServiceServer) CreateBrigade(context.Context, *Brigade) (*Brigade, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBrigade not implemented")
}
func (UnimplementedPersonServiceServer) AlterBrigade(context.Context, *Brigade) (*Brigade, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterBrigade not implemented")
}
func (UnimplementedPersonServiceServer) GetAllBrigades(context.Context, *emptypb.Empty) (*BrigadeList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllBrigades not implemented")
}
func (UnimplementedPersonServiceServer) CreatePerson(context.Context, *Person) (*Person, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePerson not implemented")
}
func (UnimplementedPersonServiceServer) AlterPerson(context.Context, *Person) (*Person, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterPerson not implemented")
}
func (UnimplementedPersonServiceServer) GetAllPersons(context.Context, *emptypb.Empty) (*PersonList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPersons not implemented")
}
func (UnimplementedPersonServiceServer) mustEmbedUnimplementedPersonServiceServer() {}
func (UnimplementedPersonServiceServer) testEmbeddedByValue()                       {}

// UnsafePersonServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PersonServiceServer will
// result in compilation errors.
type UnsafePersonServiceServer interface {
	mustEmbedUnimplementedPersonServiceServer()
}

func RegisterPersonServiceServer(s grpc.ServiceRegistrar, srv PersonServiceServer) {
	// If the following call pancis, it indicates UnimplementedPersonServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PersonService_ServiceDesc, srv)
}

func _PersonService_CreateTransportUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransportUnit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonServiceServer).CreateTransportUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonService_CreateTransportUnit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonServiceServer).CreateTransportUnit(ctx, req.(*TransportUnit))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonService_AlterTransportUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransportUnit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonServiceServer).AlterTransportUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonService_AlterTransportUnit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonServiceServer).AlterTransportUnit(ctx, req.(*TransportUnit))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonService_GetAllTransportUnits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonServiceServer).GetAllTransportUnits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonService_GetAllTransportUnits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonServiceServer).GetAllTransportUnits(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonService_GetFilteredPersons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersonFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonServiceServer).GetFilteredPersons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonService_GetFilteredPersons_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonServiceServer).GetFilteredPersons(ctx, req.(*PersonFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonService_GetFilteredRepairWorks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersonFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonServiceServer).GetFilteredRepairWorks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonService_GetFilteredRepairWorks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonServiceServer).GetFilteredRepairWorks(ctx, req.(*PersonFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonService_AlterRepairWork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepairWork)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonServiceServer).AlterRepairWork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonService_AlterRepairWork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonServiceServer).AlterRepairWork(ctx, req.(*RepairWork))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonService_CreateRepairWork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepairWork)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonServiceServer).CreateRepairWork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonService_CreateRepairWork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonServiceServer).CreateRepairWork(ctx, req.(*RepairWork))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonService_GetAllRepairWorks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonServiceServer).GetAllRepairWorks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonService_GetAllRepairWorks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonServiceServer).GetAllRepairWorks(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonService_CreateBrigade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Brigade)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonServiceServer).CreateBrigade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonService_CreateBrigade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonServiceServer).CreateBrigade(ctx, req.(*Brigade))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonService_AlterBrigade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Brigade)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonServiceServer).AlterBrigade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonService_AlterBrigade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonServiceServer).AlterBrigade(ctx, req.(*Brigade))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonService_GetAllBrigades_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonServiceServer).GetAllBrigades(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonService_GetAllBrigades_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonServiceServer).GetAllBrigades(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonService_CreatePerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Person)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonServiceServer).CreatePerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonService_CreatePerson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonServiceServer).CreatePerson(ctx, req.(*Person))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonService_AlterPerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Person)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonServiceServer).AlterPerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonService_AlterPerson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonServiceServer).AlterPerson(ctx, req.(*Person))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonService_GetAllPersons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonServiceServer).GetAllPersons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonService_GetAllPersons_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonServiceServer).GetAllPersons(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// PersonService_ServiceDesc is the grpc.ServiceDesc for PersonService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PersonService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.PersonService",
	HandlerType: (*PersonServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTransportUnit",
			Handler:    _PersonService_CreateTransportUnit_Handler,
		},
		{
			MethodName: "AlterTransportUnit",
			Handler:    _PersonService_AlterTransportUnit_Handler,
		},
		{
			MethodName: "GetAllTransportUnits",
			Handler:    _PersonService_GetAllTransportUnits_Handler,
		},
		{
			MethodName: "GetFilteredPersons",
			Handler:    _PersonService_GetFilteredPersons_Handler,
		},
		{
			MethodName: "GetFilteredRepairWorks",
			Handler:    _PersonService_GetFilteredRepairWorks_Handler,
		},
		{
			MethodName: "AlterRepairWork",
			Handler:    _PersonService_AlterRepairWork_Handler,
		},
		{
			MethodName: "CreateRepairWork",
			Handler:    _PersonService_CreateRepairWork_Handler,
		},
		{
			MethodName: "GetAllRepairWorks",
			Handler:    _PersonService_GetAllRepairWorks_Handler,
		},
		{
			MethodName: "CreateBrigade",
			Handler:    _PersonService_CreateBrigade_Handler,
		},
		{
			MethodName: "AlterBrigade",
			Handler:    _PersonService_AlterBrigade_Handler,
		},
		{
			MethodName: "GetAllBrigades",
			Handler:    _PersonService_GetAllBrigades_Handler,
		},
		{
			MethodName: "CreatePerson",
			Handler:    _PersonService_CreatePerson_Handler,
		},
		{
			MethodName: "AlterPerson",
			Handler:    _PersonService_AlterPerson_Handler,
		},
		{
			MethodName: "GetAllPersons",
			Handler:    _PersonService_GetAllPersons_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/person_service.proto",
}
