// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.28.2
// source: proto/person_service.proto

package __

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Role int32

const (
	Role_foreman    Role = 0
	Role_master     Role = 1
	Role_manager    Role = 2
	Role_driver     Role = 3
	Role_technician Role = 4
	Role_welder     Role = 5
	Role_assembler  Role = 6
	Role_plumber    Role = 7
)

// Enum value maps for Role.
var (
	Role_name = map[int32]string{
		0: "foreman",
		1: "master",
		2: "manager",
		3: "driver",
		4: "technician",
		5: "welder",
		6: "assembler",
		7: "plumber",
	}
	Role_value = map[string]int32{
		"foreman":    0,
		"master":     1,
		"manager":    2,
		"driver":     3,
		"technician": 4,
		"welder":     5,
		"assembler":  6,
		"plumber":    7,
	}
)

func (x Role) Enum() *Role {
	p := new(Role)
	*p = x
	return p
}

func (x Role) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Role) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_person_service_proto_enumTypes[0].Descriptor()
}

func (Role) Type() protoreflect.EnumType {
	return &file_proto_person_service_proto_enumTypes[0]
}

func (x Role) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Role.Descriptor instead.
func (Role) EnumDescriptor() ([]byte, []int) {
	return file_proto_person_service_proto_rawDescGZIP(), []int{0}
}

type RepairState int32

const (
	RepairState_in_progress RepairState = 0
	RepairState_finished    RepairState = 1
	RepairState_not_started RepairState = 2
)

// Enum value maps for RepairState.
var (
	RepairState_name = map[int32]string{
		0: "in_progress",
		1: "finished",
		2: "not_started",
	}
	RepairState_value = map[string]int32{
		"in_progress": 0,
		"finished":    1,
		"not_started": 2,
	}
)

func (x RepairState) Enum() *RepairState {
	p := new(RepairState)
	*p = x
	return p
}

func (x RepairState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RepairState) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_person_service_proto_enumTypes[1].Descriptor()
}

func (RepairState) Type() protoreflect.EnumType {
	return &file_proto_person_service_proto_enumTypes[1]
}

func (x RepairState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RepairState.Descriptor instead.
func (RepairState) EnumDescriptor() ([]byte, []int) {
	return file_proto_person_service_proto_rawDescGZIP(), []int{1}
}

type TransportUnit struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *int32                 `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description   *string                `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Type          *string                `protobuf:"bytes,4,opt,name=type,proto3,oneof" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransportUnit) Reset() {
	*x = TransportUnit{}
	mi := &file_proto_person_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransportUnit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransportUnit) ProtoMessage() {}

func (x *TransportUnit) ProtoReflect() protoreflect.Message {
	mi := &file_proto_person_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransportUnit.ProtoReflect.Descriptor instead.
func (*TransportUnit) Descriptor() ([]byte, []int) {
	return file_proto_person_service_proto_rawDescGZIP(), []int{0}
}

func (x *TransportUnit) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *TransportUnit) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TransportUnit) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *TransportUnit) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

type RepairWork struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Id                 *int32                 `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Description        *string                `protobuf:"bytes,2,opt,name=description,proto3,oneof" json:"description,omitempty"`
	StartTime          *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime            *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=endTime,proto3,oneof" json:"endTime,omitempty"`
	TransportId        int32                  `protobuf:"varint,5,opt,name=transportId,proto3" json:"transportId,omitempty"`
	ServicePersonnelId int32                  `protobuf:"varint,6,opt,name=servicePersonnelId,proto3" json:"servicePersonnelId,omitempty"`
	UnitId             *int32                 `protobuf:"varint,7,opt,name=unitId,proto3,oneof" json:"unitId,omitempty"`
	RepairCost         *float32               `protobuf:"fixed32,8,opt,name=repairCost,proto3,oneof" json:"repairCost,omitempty"`
	State              string                 `protobuf:"bytes,9,opt,name=state,proto3" json:"state,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *RepairWork) Reset() {
	*x = RepairWork{}
	mi := &file_proto_person_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RepairWork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepairWork) ProtoMessage() {}

func (x *RepairWork) ProtoReflect() protoreflect.Message {
	mi := &file_proto_person_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepairWork.ProtoReflect.Descriptor instead.
func (*RepairWork) Descriptor() ([]byte, []int) {
	return file_proto_person_service_proto_rawDescGZIP(), []int{1}
}

func (x *RepairWork) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *RepairWork) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *RepairWork) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *RepairWork) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *RepairWork) GetTransportId() int32 {
	if x != nil {
		return x.TransportId
	}
	return 0
}

func (x *RepairWork) GetServicePersonnelId() int32 {
	if x != nil {
		return x.ServicePersonnelId
	}
	return 0
}

func (x *RepairWork) GetUnitId() int32 {
	if x != nil && x.UnitId != nil {
		return *x.UnitId
	}
	return 0
}

func (x *RepairWork) GetRepairCost() float32 {
	if x != nil && x.RepairCost != nil {
		return *x.RepairCost
	}
	return 0
}

func (x *RepairWork) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

type Brigade struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *int32                 `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	ForemanId     *int32                 `protobuf:"varint,2,opt,name=foremanId,proto3,oneof" json:"foremanId,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Brigade) Reset() {
	*x = Brigade{}
	mi := &file_proto_person_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Brigade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Brigade) ProtoMessage() {}

func (x *Brigade) ProtoReflect() protoreflect.Message {
	mi := &file_proto_person_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Brigade.ProtoReflect.Descriptor instead.
func (*Brigade) Descriptor() ([]byte, []int) {
	return file_proto_person_service_proto_rawDescGZIP(), []int{2}
}

func (x *Brigade) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Brigade) GetForemanId() int32 {
	if x != nil && x.ForemanId != nil {
		return *x.ForemanId
	}
	return 0
}

func (x *Brigade) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DriverInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TransportId   *int32                 `protobuf:"varint,1,opt,name=transportId,proto3,oneof" json:"transportId,omitempty"`
	BrigadeId     *int32                 `protobuf:"varint,3,opt,name=brigadeId,proto3,oneof" json:"brigadeId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DriverInfo) Reset() {
	*x = DriverInfo{}
	mi := &file_proto_person_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DriverInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DriverInfo) ProtoMessage() {}

func (x *DriverInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_person_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DriverInfo.ProtoReflect.Descriptor instead.
func (*DriverInfo) Descriptor() ([]byte, []int) {
	return file_proto_person_service_proto_rawDescGZIP(), []int{3}
}

func (x *DriverInfo) GetTransportId() int32 {
	if x != nil && x.TransportId != nil {
		return *x.TransportId
	}
	return 0
}

func (x *DriverInfo) GetBrigadeId() int32 {
	if x != nil && x.BrigadeId != nil {
		return *x.BrigadeId
	}
	return 0
}

type ForemanInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MasterId      *int32                 `protobuf:"varint,1,opt,name=masterId,proto3,oneof" json:"masterId,omitempty"`
	ServiceCenter *string                `protobuf:"bytes,3,opt,name=serviceCenter,proto3,oneof" json:"serviceCenter,omitempty"`
	Certification *string                `protobuf:"bytes,4,opt,name=certification,proto3,oneof" json:"certification,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ForemanInfo) Reset() {
	*x = ForemanInfo{}
	mi := &file_proto_person_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ForemanInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForemanInfo) ProtoMessage() {}

func (x *ForemanInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_person_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForemanInfo.ProtoReflect.Descriptor instead.
func (*ForemanInfo) Descriptor() ([]byte, []int) {
	return file_proto_person_service_proto_rawDescGZIP(), []int{4}
}

func (x *ForemanInfo) GetMasterId() int32 {
	if x != nil && x.MasterId != nil {
		return *x.MasterId
	}
	return 0
}

func (x *ForemanInfo) GetServiceCenter() string {
	if x != nil && x.ServiceCenter != nil {
		return *x.ServiceCenter
	}
	return ""
}

func (x *ForemanInfo) GetCertification() string {
	if x != nil && x.Certification != nil {
		return *x.Certification
	}
	return ""
}

type MasterInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ManagerId     *int32                 `protobuf:"varint,1,opt,name=managerId,proto3,oneof" json:"managerId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MasterInfo) Reset() {
	*x = MasterInfo{}
	mi := &file_proto_person_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MasterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MasterInfo) ProtoMessage() {}

func (x *MasterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_person_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MasterInfo.ProtoReflect.Descriptor instead.
func (*MasterInfo) Descriptor() ([]byte, []int) {
	return file_proto_person_service_proto_rawDescGZIP(), []int{5}
}

func (x *MasterInfo) GetManagerId() int32 {
	if x != nil && x.ManagerId != nil {
		return *x.ManagerId
	}
	return 0
}

type ManagerInfo struct {
	state                     protoimpl.MessageState `protogen:"open.v1"`
	Department                string                 `protobuf:"bytes,2,opt,name=department,proto3" json:"department,omitempty"`
	ManagementExperienceYears int32                  `protobuf:"varint,3,opt,name=managementExperienceYears,proto3" json:"managementExperienceYears,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *ManagerInfo) Reset() {
	*x = ManagerInfo{}
	mi := &file_proto_person_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ManagerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagerInfo) ProtoMessage() {}

func (x *ManagerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_person_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagerInfo.ProtoReflect.Descriptor instead.
func (*ManagerInfo) Descriptor() ([]byte, []int) {
	return file_proto_person_service_proto_rawDescGZIP(), []int{6}
}

func (x *ManagerInfo) GetDepartment() string {
	if x != nil {
		return x.Department
	}
	return ""
}

func (x *ManagerInfo) GetManagementExperienceYears() int32 {
	if x != nil {
		return x.ManagementExperienceYears
	}
	return 0
}

type AssemblerInfo struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ExperienceYears int32                  `protobuf:"varint,2,opt,name=experienceYears,proto3" json:"experienceYears,omitempty"`
	Specialization  *string                `protobuf:"bytes,3,opt,name=specialization,proto3,oneof" json:"specialization,omitempty"`
	Certification   *string                `protobuf:"bytes,4,opt,name=certification,proto3,oneof" json:"certification,omitempty"`
	BrigadeId       *int32                 `protobuf:"varint,5,opt,name=brigadeId,proto3,oneof" json:"brigadeId,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *AssemblerInfo) Reset() {
	*x = AssemblerInfo{}
	mi := &file_proto_person_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssemblerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssemblerInfo) ProtoMessage() {}

func (x *AssemblerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_person_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssemblerInfo.ProtoReflect.Descriptor instead.
func (*AssemblerInfo) Descriptor() ([]byte, []int) {
	return file_proto_person_service_proto_rawDescGZIP(), []int{7}
}

func (x *AssemblerInfo) GetExperienceYears() int32 {
	if x != nil {
		return x.ExperienceYears
	}
	return 0
}

func (x *AssemblerInfo) GetSpecialization() string {
	if x != nil && x.Specialization != nil {
		return *x.Specialization
	}
	return ""
}

func (x *AssemblerInfo) GetCertification() string {
	if x != nil && x.Certification != nil {
		return *x.Certification
	}
	return ""
}

func (x *AssemblerInfo) GetBrigadeId() int32 {
	if x != nil && x.BrigadeId != nil {
		return *x.BrigadeId
	}
	return 0
}

type PlumberInfo struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Specialization *string                `protobuf:"bytes,2,opt,name=specialization,proto3,oneof" json:"specialization,omitempty"`
	Certification  *string                `protobuf:"bytes,3,opt,name=certification,proto3,oneof" json:"certification,omitempty"`
	SafetyTraining bool                   `protobuf:"varint,4,opt,name=safetyTraining,proto3" json:"safetyTraining,omitempty"`
	BrigadeId      *int32                 `protobuf:"varint,5,opt,name=brigadeId,proto3,oneof" json:"brigadeId,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PlumberInfo) Reset() {
	*x = PlumberInfo{}
	mi := &file_proto_person_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlumberInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlumberInfo) ProtoMessage() {}

func (x *PlumberInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_person_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlumberInfo.ProtoReflect.Descriptor instead.
func (*PlumberInfo) Descriptor() ([]byte, []int) {
	return file_proto_person_service_proto_rawDescGZIP(), []int{8}
}

func (x *PlumberInfo) GetSpecialization() string {
	if x != nil && x.Specialization != nil {
		return *x.Specialization
	}
	return ""
}

func (x *PlumberInfo) GetCertification() string {
	if x != nil && x.Certification != nil {
		return *x.Certification
	}
	return ""
}

func (x *PlumberInfo) GetSafetyTraining() bool {
	if x != nil {
		return x.SafetyTraining
	}
	return false
}

func (x *PlumberInfo) GetBrigadeId() int32 {
	if x != nil && x.BrigadeId != nil {
		return *x.BrigadeId
	}
	return 0
}

type TechnicianInfo struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	FieldOfExpertise *string                `protobuf:"bytes,2,opt,name=fieldOfExpertise,proto3,oneof" json:"fieldOfExpertise,omitempty"`
	Certification    *string                `protobuf:"bytes,3,opt,name=certification,proto3,oneof" json:"certification,omitempty"`
	BrigadeId        *int32                 `protobuf:"varint,5,opt,name=brigadeId,proto3,oneof" json:"brigadeId,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *TechnicianInfo) Reset() {
	*x = TechnicianInfo{}
	mi := &file_proto_person_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TechnicianInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TechnicianInfo) ProtoMessage() {}

func (x *TechnicianInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_person_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TechnicianInfo.ProtoReflect.Descriptor instead.
func (*TechnicianInfo) Descriptor() ([]byte, []int) {
	return file_proto_person_service_proto_rawDescGZIP(), []int{9}
}

func (x *TechnicianInfo) GetFieldOfExpertise() string {
	if x != nil && x.FieldOfExpertise != nil {
		return *x.FieldOfExpertise
	}
	return ""
}

func (x *TechnicianInfo) GetCertification() string {
	if x != nil && x.Certification != nil {
		return *x.Certification
	}
	return ""
}

func (x *TechnicianInfo) GetBrigadeId() int32 {
	if x != nil && x.BrigadeId != nil {
		return *x.BrigadeId
	}
	return 0
}

type WelderInfo struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	WeldingType    *string                `protobuf:"bytes,2,opt,name=weldingType,proto3,oneof" json:"weldingType,omitempty"`
	Certification  *string                `protobuf:"bytes,3,opt,name=certification,proto3,oneof" json:"certification,omitempty"`
	SafetyTraining bool                   `protobuf:"varint,4,opt,name=safetyTraining,proto3" json:"safetyTraining,omitempty"`
	BrigadeId      *int32                 `protobuf:"varint,5,opt,name=brigadeId,proto3,oneof" json:"brigadeId,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *WelderInfo) Reset() {
	*x = WelderInfo{}
	mi := &file_proto_person_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WelderInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WelderInfo) ProtoMessage() {}

func (x *WelderInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_person_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WelderInfo.ProtoReflect.Descriptor instead.
func (*WelderInfo) Descriptor() ([]byte, []int) {
	return file_proto_person_service_proto_rawDescGZIP(), []int{10}
}

func (x *WelderInfo) GetWeldingType() string {
	if x != nil && x.WeldingType != nil {
		return *x.WeldingType
	}
	return ""
}

func (x *WelderInfo) GetCertification() string {
	if x != nil && x.Certification != nil {
		return *x.Certification
	}
	return ""
}

func (x *WelderInfo) GetSafetyTraining() bool {
	if x != nil {
		return x.SafetyTraining
	}
	return false
}

func (x *WelderInfo) GetBrigadeId() int32 {
	if x != nil && x.BrigadeId != nil {
		return *x.BrigadeId
	}
	return 0
}

type Person struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	Id          *int32                 `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	FirstName   string                 `protobuf:"bytes,2,opt,name=firstName,proto3" json:"firstName,omitempty"`
	SecondName  string                 `protobuf:"bytes,3,opt,name=secondName,proto3" json:"secondName,omitempty"`
	Role        string                 `protobuf:"bytes,4,opt,name=role,proto3" json:"role,omitempty"`
	BirthDate   *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=birthDate,proto3" json:"birthDate,omitempty"`
	PhoneNumber string                 `protobuf:"bytes,14,opt,name=phoneNumber,proto3" json:"phoneNumber,omitempty"`
	Email       string                 `protobuf:"bytes,15,opt,name=email,proto3" json:"email,omitempty"`
	Salary      float32                `protobuf:"fixed32,16,opt,name=salary,proto3" json:"salary,omitempty"`
	// Types that are valid to be assigned to PersonInfo:
	//
	//	*Person_ForemanInfo
	//	*Person_MasterInfo
	//	*Person_ManagerInfo
	//	*Person_DriverInfo
	//	*Person_TechnicianInfo
	//	*Person_WelderInfo
	//	*Person_AssemblerInfo
	//	*Person_PlumberInfo
	PersonInfo    isPerson_PersonInfo `protobuf_oneof:"personInfo"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Person) Reset() {
	*x = Person{}
	mi := &file_proto_person_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Person) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Person) ProtoMessage() {}

func (x *Person) ProtoReflect() protoreflect.Message {
	mi := &file_proto_person_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Person.ProtoReflect.Descriptor instead.
func (*Person) Descriptor() ([]byte, []int) {
	return file_proto_person_service_proto_rawDescGZIP(), []int{11}
}

func (x *Person) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Person) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *Person) GetSecondName() string {
	if x != nil {
		return x.SecondName
	}
	return ""
}

func (x *Person) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *Person) GetBirthDate() *timestamppb.Timestamp {
	if x != nil {
		return x.BirthDate
	}
	return nil
}

func (x *Person) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *Person) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Person) GetSalary() float32 {
	if x != nil {
		return x.Salary
	}
	return 0
}

func (x *Person) GetPersonInfo() isPerson_PersonInfo {
	if x != nil {
		return x.PersonInfo
	}
	return nil
}

func (x *Person) GetForemanInfo() *ForemanInfo {
	if x != nil {
		if x, ok := x.PersonInfo.(*Person_ForemanInfo); ok {
			return x.ForemanInfo
		}
	}
	return nil
}

func (x *Person) GetMasterInfo() *MasterInfo {
	if x != nil {
		if x, ok := x.PersonInfo.(*Person_MasterInfo); ok {
			return x.MasterInfo
		}
	}
	return nil
}

func (x *Person) GetManagerInfo() *ManagerInfo {
	if x != nil {
		if x, ok := x.PersonInfo.(*Person_ManagerInfo); ok {
			return x.ManagerInfo
		}
	}
	return nil
}

func (x *Person) GetDriverInfo() *DriverInfo {
	if x != nil {
		if x, ok := x.PersonInfo.(*Person_DriverInfo); ok {
			return x.DriverInfo
		}
	}
	return nil
}

func (x *Person) GetTechnicianInfo() *TechnicianInfo {
	if x != nil {
		if x, ok := x.PersonInfo.(*Person_TechnicianInfo); ok {
			return x.TechnicianInfo
		}
	}
	return nil
}

func (x *Person) GetWelderInfo() *WelderInfo {
	if x != nil {
		if x, ok := x.PersonInfo.(*Person_WelderInfo); ok {
			return x.WelderInfo
		}
	}
	return nil
}

func (x *Person) GetAssemblerInfo() *AssemblerInfo {
	if x != nil {
		if x, ok := x.PersonInfo.(*Person_AssemblerInfo); ok {
			return x.AssemblerInfo
		}
	}
	return nil
}

func (x *Person) GetPlumberInfo() *PlumberInfo {
	if x != nil {
		if x, ok := x.PersonInfo.(*Person_PlumberInfo); ok {
			return x.PlumberInfo
		}
	}
	return nil
}

type isPerson_PersonInfo interface {
	isPerson_PersonInfo()
}

type Person_ForemanInfo struct {
	ForemanInfo *ForemanInfo `protobuf:"bytes,5,opt,name=foremanInfo,proto3,oneof"`
}

type Person_MasterInfo struct {
	MasterInfo *MasterInfo `protobuf:"bytes,6,opt,name=masterInfo,proto3,oneof"`
}

type Person_ManagerInfo struct {
	ManagerInfo *ManagerInfo `protobuf:"bytes,7,opt,name=managerInfo,proto3,oneof"`
}

type Person_DriverInfo struct {
	DriverInfo *DriverInfo `protobuf:"bytes,8,opt,name=driverInfo,proto3,oneof"`
}

type Person_TechnicianInfo struct {
	TechnicianInfo *TechnicianInfo `protobuf:"bytes,9,opt,name=technicianInfo,proto3,oneof"`
}

type Person_WelderInfo struct {
	WelderInfo *WelderInfo `protobuf:"bytes,10,opt,name=welderInfo,proto3,oneof"`
}

type Person_AssemblerInfo struct {
	AssemblerInfo *AssemblerInfo `protobuf:"bytes,11,opt,name=assemblerInfo,proto3,oneof"`
}

type Person_PlumberInfo struct {
	PlumberInfo *PlumberInfo `protobuf:"bytes,12,opt,name=plumberInfo,proto3,oneof"`
}

func (*Person_ForemanInfo) isPerson_PersonInfo() {}

func (*Person_MasterInfo) isPerson_PersonInfo() {}

func (*Person_ManagerInfo) isPerson_PersonInfo() {}

func (*Person_DriverInfo) isPerson_PersonInfo() {}

func (*Person_TechnicianInfo) isPerson_PersonInfo() {}

func (*Person_WelderInfo) isPerson_PersonInfo() {}

func (*Person_AssemblerInfo) isPerson_PersonInfo() {}

func (*Person_PlumberInfo) isPerson_PersonInfo() {}

type PersonList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Persons       []*Person              `protobuf:"bytes,1,rep,name=persons,proto3" json:"persons,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PersonList) Reset() {
	*x = PersonList{}
	mi := &file_proto_person_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PersonList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersonList) ProtoMessage() {}

func (x *PersonList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_person_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersonList.ProtoReflect.Descriptor instead.
func (*PersonList) Descriptor() ([]byte, []int) {
	return file_proto_person_service_proto_rawDescGZIP(), []int{12}
}

func (x *PersonList) GetPersons() []*Person {
	if x != nil {
		return x.Persons
	}
	return nil
}

type BrigadeList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Brigades      []*Brigade             `protobuf:"bytes,1,rep,name=brigades,proto3" json:"brigades,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BrigadeList) Reset() {
	*x = BrigadeList{}
	mi := &file_proto_person_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BrigadeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrigadeList) ProtoMessage() {}

func (x *BrigadeList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_person_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrigadeList.ProtoReflect.Descriptor instead.
func (*BrigadeList) Descriptor() ([]byte, []int) {
	return file_proto_person_service_proto_rawDescGZIP(), []int{13}
}

func (x *BrigadeList) GetBrigades() []*Brigade {
	if x != nil {
		return x.Brigades
	}
	return nil
}

type RepairWorkList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RepairWorks   []*RepairWork          `protobuf:"bytes,1,rep,name=repairWorks,proto3" json:"repairWorks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RepairWorkList) Reset() {
	*x = RepairWorkList{}
	mi := &file_proto_person_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RepairWorkList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepairWorkList) ProtoMessage() {}

func (x *RepairWorkList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_person_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepairWorkList.ProtoReflect.Descriptor instead.
func (*RepairWorkList) Descriptor() ([]byte, []int) {
	return file_proto_person_service_proto_rawDescGZIP(), []int{14}
}

func (x *RepairWorkList) GetRepairWorks() []*RepairWork {
	if x != nil {
		return x.RepairWorks
	}
	return nil
}

type MasterFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ManagerId     *int32                 `protobuf:"varint,1,opt,name=managerId,proto3,oneof" json:"managerId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MasterFilter) Reset() {
	*x = MasterFilter{}
	mi := &file_proto_person_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MasterFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MasterFilter) ProtoMessage() {}

func (x *MasterFilter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_person_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MasterFilter.ProtoReflect.Descriptor instead.
func (*MasterFilter) Descriptor() ([]byte, []int) {
	return file_proto_person_service_proto_rawDescGZIP(), []int{15}
}

func (x *MasterFilter) GetManagerId() int32 {
	if x != nil && x.ManagerId != nil {
		return *x.ManagerId
	}
	return 0
}

type ForemanFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MasterId      *int32                 `protobuf:"varint,1,opt,name=masterId,proto3,oneof" json:"masterId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ForemanFilter) Reset() {
	*x = ForemanFilter{}
	mi := &file_proto_person_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ForemanFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForemanFilter) ProtoMessage() {}

func (x *ForemanFilter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_person_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForemanFilter.ProtoReflect.Descriptor instead.
func (*ForemanFilter) Descriptor() ([]byte, []int) {
	return file_proto_person_service_proto_rawDescGZIP(), []int{16}
}

func (x *ForemanFilter) GetMasterId() int32 {
	if x != nil && x.MasterId != nil {
		return *x.MasterId
	}
	return 0
}

type ServicePersonnelFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ForemanId     *int32                 `protobuf:"varint,1,opt,name=foremanId,proto3,oneof" json:"foremanId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServicePersonnelFilter) Reset() {
	*x = ServicePersonnelFilter{}
	mi := &file_proto_person_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServicePersonnelFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServicePersonnelFilter) ProtoMessage() {}

func (x *ServicePersonnelFilter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_person_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServicePersonnelFilter.ProtoReflect.Descriptor instead.
func (*ServicePersonnelFilter) Descriptor() ([]byte, []int) {
	return file_proto_person_service_proto_rawDescGZIP(), []int{17}
}

func (x *ServicePersonnelFilter) GetForemanId() int32 {
	if x != nil && x.ForemanId != nil {
		return *x.ForemanId
	}
	return 0
}

type PersonFilter struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	Roles     []Role                 `protobuf:"varint,1,rep,packed,name=roles,proto3,enum=person.Role" json:"roles,omitempty"`
	BrigadeId *int32                 `protobuf:"varint,2,opt,name=brigadeId,proto3,oneof" json:"brigadeId,omitempty"`
	Ids       []int32                `protobuf:"varint,3,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	// Types that are valid to be assigned to RoleBasedFilter:
	//
	//	*PersonFilter_MasterFilter
	//	*PersonFilter_ForemanFilter
	//	*PersonFilter_ServicePersonnelFilter
	RoleBasedFilter isPersonFilter_RoleBasedFilter `protobuf_oneof:"roleBasedFilter"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *PersonFilter) Reset() {
	*x = PersonFilter{}
	mi := &file_proto_person_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PersonFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersonFilter) ProtoMessage() {}

func (x *PersonFilter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_person_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersonFilter.ProtoReflect.Descriptor instead.
func (*PersonFilter) Descriptor() ([]byte, []int) {
	return file_proto_person_service_proto_rawDescGZIP(), []int{18}
}

func (x *PersonFilter) GetRoles() []Role {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *PersonFilter) GetBrigadeId() int32 {
	if x != nil && x.BrigadeId != nil {
		return *x.BrigadeId
	}
	return 0
}

func (x *PersonFilter) GetIds() []int32 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *PersonFilter) GetRoleBasedFilter() isPersonFilter_RoleBasedFilter {
	if x != nil {
		return x.RoleBasedFilter
	}
	return nil
}

func (x *PersonFilter) GetMasterFilter() *MasterFilter {
	if x != nil {
		if x, ok := x.RoleBasedFilter.(*PersonFilter_MasterFilter); ok {
			return x.MasterFilter
		}
	}
	return nil
}

func (x *PersonFilter) GetForemanFilter() *ForemanFilter {
	if x != nil {
		if x, ok := x.RoleBasedFilter.(*PersonFilter_ForemanFilter); ok {
			return x.ForemanFilter
		}
	}
	return nil
}

func (x *PersonFilter) GetServicePersonnelFilter() *ServicePersonnelFilter {
	if x != nil {
		if x, ok := x.RoleBasedFilter.(*PersonFilter_ServicePersonnelFilter); ok {
			return x.ServicePersonnelFilter
		}
	}
	return nil
}

type isPersonFilter_RoleBasedFilter interface {
	isPersonFilter_RoleBasedFilter()
}

type PersonFilter_MasterFilter struct {
	MasterFilter *MasterFilter `protobuf:"bytes,4,opt,name=masterFilter,proto3,oneof"`
}

type PersonFilter_ForemanFilter struct {
	ForemanFilter *ForemanFilter `protobuf:"bytes,5,opt,name=foremanFilter,proto3,oneof"`
}

type PersonFilter_ServicePersonnelFilter struct {
	ServicePersonnelFilter *ServicePersonnelFilter `protobuf:"bytes,6,opt,name=servicePersonnelFilter,proto3,oneof"`
}

func (*PersonFilter_MasterFilter) isPersonFilter_RoleBasedFilter() {}

func (*PersonFilter_ForemanFilter) isPersonFilter_RoleBasedFilter() {}

func (*PersonFilter_ServicePersonnelFilter) isPersonFilter_RoleBasedFilter() {}

type RepairWorkFilter struct {
	state              protoimpl.MessageState      `protogen:"open.v1"`
	TransportBrand     *string                     `protobuf:"bytes,7,opt,name=transportBrand,proto3,oneof" json:"transportBrand,omitempty"`
	TransportType      *string                     `protobuf:"bytes,8,opt,name=transportType,proto3,oneof" json:"transportType,omitempty"`
	States             []RepairState               `protobuf:"varint,1,rep,packed,name=states,proto3,enum=person.RepairState" json:"states,omitempty"`
	BrigadeId          *int32                      `protobuf:"varint,2,opt,name=brigadeId,proto3,oneof" json:"brigadeId,omitempty"`
	DateRange          *RepairWorkFilter_DateRange `protobuf:"bytes,3,opt,name=dateRange,proto3,oneof" json:"dateRange,omitempty"`
	TransportId        *int32                      `protobuf:"varint,4,opt,name=transportId,proto3,oneof" json:"transportId,omitempty"`
	ServicePersonnelId *int32                      `protobuf:"varint,5,opt,name=servicePersonnelId,proto3,oneof" json:"servicePersonnelId,omitempty"`
	UnitId             *int32                      `protobuf:"varint,6,opt,name=unitId,proto3,oneof" json:"unitId,omitempty"`
	Ids                []int32                     `protobuf:"varint,9,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *RepairWorkFilter) Reset() {
	*x = RepairWorkFilter{}
	mi := &file_proto_person_service_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RepairWorkFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepairWorkFilter) ProtoMessage() {}

func (x *RepairWorkFilter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_person_service_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepairWorkFilter.ProtoReflect.Descriptor instead.
func (*RepairWorkFilter) Descriptor() ([]byte, []int) {
	return file_proto_person_service_proto_rawDescGZIP(), []int{19}
}

func (x *RepairWorkFilter) GetTransportBrand() string {
	if x != nil && x.TransportBrand != nil {
		return *x.TransportBrand
	}
	return ""
}

func (x *RepairWorkFilter) GetTransportType() string {
	if x != nil && x.TransportType != nil {
		return *x.TransportType
	}
	return ""
}

func (x *RepairWorkFilter) GetStates() []RepairState {
	if x != nil {
		return x.States
	}
	return nil
}

func (x *RepairWorkFilter) GetBrigadeId() int32 {
	if x != nil && x.BrigadeId != nil {
		return *x.BrigadeId
	}
	return 0
}

func (x *RepairWorkFilter) GetDateRange() *RepairWorkFilter_DateRange {
	if x != nil {
		return x.DateRange
	}
	return nil
}

func (x *RepairWorkFilter) GetTransportId() int32 {
	if x != nil && x.TransportId != nil {
		return *x.TransportId
	}
	return 0
}

func (x *RepairWorkFilter) GetServicePersonnelId() int32 {
	if x != nil && x.ServicePersonnelId != nil {
		return *x.ServicePersonnelId
	}
	return 0
}

func (x *RepairWorkFilter) GetUnitId() int32 {
	if x != nil && x.UnitId != nil {
		return *x.UnitId
	}
	return 0
}

func (x *RepairWorkFilter) GetIds() []int32 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type TransportUnitList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Units         []*TransportUnit       `protobuf:"bytes,1,rep,name=units,proto3" json:"units,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransportUnitList) Reset() {
	*x = TransportUnitList{}
	mi := &file_proto_person_service_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransportUnitList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransportUnitList) ProtoMessage() {}

func (x *TransportUnitList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_person_service_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransportUnitList.ProtoReflect.Descriptor instead.
func (*TransportUnitList) Descriptor() ([]byte, []int) {
	return file_proto_person_service_proto_rawDescGZIP(), []int{20}
}

func (x *TransportUnitList) GetUnits() []*TransportUnit {
	if x != nil {
		return x.Units
	}
	return nil
}

type DriversRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TransportId   int32                  `protobuf:"varint,1,opt,name=transportId,proto3" json:"transportId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DriversRequest) Reset() {
	*x = DriversRequest{}
	mi := &file_proto_person_service_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DriversRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DriversRequest) ProtoMessage() {}

func (x *DriversRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_person_service_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DriversRequest.ProtoReflect.Descriptor instead.
func (*DriversRequest) Descriptor() ([]byte, []int) {
	return file_proto_person_service_proto_rawDescGZIP(), []int{21}
}

func (x *DriversRequest) GetTransportId() int32 {
	if x != nil {
		return x.TransportId
	}
	return 0
}

type DeleteRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ids           []int32                `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteRequest) Reset() {
	*x = DeleteRequest{}
	mi := &file_proto_person_service_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRequest) ProtoMessage() {}

func (x *DeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_person_service_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRequest.ProtoReflect.Descriptor instead.
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return file_proto_person_service_proto_rawDescGZIP(), []int{22}
}

func (x *DeleteRequest) GetIds() []int32 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type RepairWorkFilter_DateRange struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DateFrom      *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=dateFrom,proto3" json:"dateFrom,omitempty"`
	DateTo        *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=dateTo,proto3" json:"dateTo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RepairWorkFilter_DateRange) Reset() {
	*x = RepairWorkFilter_DateRange{}
	mi := &file_proto_person_service_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RepairWorkFilter_DateRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepairWorkFilter_DateRange) ProtoMessage() {}

func (x *RepairWorkFilter_DateRange) ProtoReflect() protoreflect.Message {
	mi := &file_proto_person_service_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepairWorkFilter_DateRange.ProtoReflect.Descriptor instead.
func (*RepairWorkFilter_DateRange) Descriptor() ([]byte, []int) {
	return file_proto_person_service_proto_rawDescGZIP(), []int{19, 0}
}

func (x *RepairWorkFilter_DateRange) GetDateFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.DateFrom
	}
	return nil
}

func (x *RepairWorkFilter_DateRange) GetDateTo() *timestamppb.Timestamp {
	if x != nil {
		return x.DateTo
	}
	return nil
}

var File_proto_person_service_proto protoreflect.FileDescriptor

var file_proto_person_service_proto_rawDesc = string([]byte{
	0x0a, 0x1a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x70, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x98, 0x01, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x55, 0x6e, 0x69, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a,
	0x03, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xa4, 0x03,
	0x0a, 0x0a, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x12, 0x13, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x39, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48,
	0x02, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a,
	0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12,
	0x2e, 0x0a, 0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x06, 0x75, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x03, 0x52, 0x06, 0x75, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a,
	0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02,
	0x48, 0x04, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x43, 0x6f, 0x73, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x75,
	0x6e, 0x69, 0x74, 0x49, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72,
	0x43, 0x6f, 0x73, 0x74, 0x22, 0x6a, 0x0a, 0x07, 0x42, 0x72, 0x69, 0x67, 0x61, 0x64, 0x65, 0x12,
	0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x69,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x66, 0x6f, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x09, 0x66, 0x6f, 0x72, 0x65, 0x6d,
	0x61, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x05, 0x0a, 0x03, 0x5f,
	0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x49, 0x64,
	0x22, 0x74, 0x0a, 0x0a, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25,
	0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x62, 0x72, 0x69, 0x67, 0x61, 0x64, 0x65,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x09, 0x62, 0x72, 0x69, 0x67,
	0x61, 0x64, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x62, 0x72, 0x69,
	0x67, 0x61, 0x64, 0x65, 0x49, 0x64, 0x22, 0xb5, 0x01, 0x0a, 0x0b, 0x46, 0x6f, 0x72, 0x65, 0x6d,
	0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0d, 0x63, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3d,
	0x0a, 0x0a, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x09,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x00, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0x6b, 0x0a,
	0x0b, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a,
	0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x19,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x65, 0x6e, 0x63, 0x65, 0x59, 0x65, 0x61, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x19, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x65, 0x6e, 0x63, 0x65, 0x59, 0x65, 0x61, 0x72, 0x73, 0x22, 0xe7, 0x01, 0x0a, 0x0d, 0x41,
	0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x0f,
	0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x59, 0x65, 0x61, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63,
	0x65, 0x59, 0x65, 0x61, 0x72, 0x73, 0x12, 0x2b, 0x0a, 0x0e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0d, 0x63, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x21,
	0x0a, 0x09, 0x62, 0x72, 0x69, 0x67, 0x61, 0x64, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x02, 0x52, 0x09, 0x62, 0x72, 0x69, 0x67, 0x61, 0x64, 0x65, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x62, 0x72, 0x69, 0x67, 0x61,
	0x64, 0x65, 0x49, 0x64, 0x22, 0xe3, 0x01, 0x0a, 0x0b, 0x50, 0x6c, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2b, 0x0a, 0x0e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x29, 0x0a, 0x0d, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0d, 0x63, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0e,
	0x73, 0x61, 0x66, 0x65, 0x74, 0x79, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x61, 0x66, 0x65, 0x74, 0x79, 0x54, 0x72, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x09, 0x62, 0x72, 0x69, 0x67, 0x61, 0x64, 0x65, 0x49,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x09, 0x62, 0x72, 0x69, 0x67, 0x61,
	0x64, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x62, 0x72, 0x69, 0x67, 0x61, 0x64, 0x65, 0x49, 0x64, 0x22, 0xc4, 0x01, 0x0a, 0x0e, 0x54,
	0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x69, 0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2f, 0x0a,
	0x10, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x66, 0x45, 0x78, 0x70, 0x65, 0x72, 0x74, 0x69, 0x73,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x10, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x4f, 0x66, 0x45, 0x78, 0x70, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29,
	0x0a, 0x0d, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0d, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x62, 0x72, 0x69,
	0x67, 0x61, 0x64, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x09,
	0x62, 0x72, 0x69, 0x67, 0x61, 0x64, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x66, 0x45, 0x78, 0x70, 0x65, 0x72, 0x74, 0x69, 0x73,
	0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x62, 0x72, 0x69, 0x67, 0x61, 0x64, 0x65, 0x49,
	0x64, 0x22, 0xd9, 0x01, 0x0a, 0x0a, 0x57, 0x65, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x25, 0x0a, 0x0b, 0x77, 0x65, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x77, 0x65, 0x6c, 0x64, 0x69, 0x6e, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x63, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x0d, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x61, 0x66, 0x65, 0x74, 0x79, 0x54, 0x72, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x61, 0x66, 0x65,
	0x74, 0x79, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x09, 0x62, 0x72,
	0x69, 0x67, 0x61, 0x64, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52,
	0x09, 0x62, 0x72, 0x69, 0x67, 0x61, 0x64, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x77, 0x65, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x62, 0x72, 0x69, 0x67, 0x61, 0x64, 0x65, 0x49, 0x64, 0x22, 0xdc, 0x05,
	0x0a, 0x06, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a,
	0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72,
	0x6f, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12,
	0x38, 0x0a, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x62, 0x69, 0x72, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x61, 0x6c, 0x61, 0x72, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x06, 0x73, 0x61, 0x6c, 0x61, 0x72, 0x79, 0x12, 0x37, 0x0a, 0x0b, 0x66, 0x6f, 0x72,
	0x65, 0x6d, 0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x46, 0x6f, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0b, 0x66, 0x6f, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x34, 0x0a, 0x0a, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e,
	0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x37, 0x0a, 0x0b, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x34, 0x0a, 0x0a, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x44,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x40, 0x0a, 0x0e, 0x74, 0x65, 0x63, 0x68, 0x6e,
	0x69, 0x63, 0x69, 0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63,
	0x69, 0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0e, 0x74, 0x65, 0x63, 0x68, 0x6e,
	0x69, 0x63, 0x69, 0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x0a, 0x77, 0x65, 0x6c,
	0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x57, 0x65, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x48, 0x00, 0x52, 0x0a, 0x77, 0x65, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x3d, 0x0a, 0x0d, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e,
	0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52,
	0x0d, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x37,
	0x0a, 0x0b, 0x70, 0x6c, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x50, 0x6c, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x6c, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x22, 0x36, 0x0a, 0x0a,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x07, 0x70, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x07, 0x70, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x73, 0x22, 0x3a, 0x0a, 0x0b, 0x42, 0x72, 0x69, 0x67, 0x61, 0x64, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x08, 0x62, 0x72, 0x69, 0x67, 0x61, 0x64, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x42,
	0x72, 0x69, 0x67, 0x61, 0x64, 0x65, 0x52, 0x08, 0x62, 0x72, 0x69, 0x67, 0x61, 0x64, 0x65, 0x73,
	0x22, 0x46, 0x0a, 0x0e, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x34, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x57, 0x6f, 0x72, 0x6b,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x2e, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x0b, 0x72, 0x65, 0x70,
	0x61, 0x69, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x22, 0x3f, 0x0a, 0x0c, 0x4d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x09, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0x3d, 0x0a, 0x0d, 0x46, 0x6f, 0x72,
	0x65, 0x6d, 0x61, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x08,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x49, 0x0a, 0x16, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x6e, 0x65, 0x6c, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x21, 0x0a, 0x09, 0x66, 0x6f, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x09, 0x66, 0x6f, 0x72, 0x65, 0x6d, 0x61, 0x6e,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x6d, 0x61,
	0x6e, 0x49, 0x64, 0x22, 0xdd, 0x02, 0x0a, 0x0c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x52, 0x6f, 0x6c,
	0x65, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x09, 0x62, 0x72, 0x69, 0x67,
	0x61, 0x64, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x09, 0x62,
	0x72, 0x69, 0x67, 0x61, 0x64, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x10, 0x0a, 0x03, 0x69,
	0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x3a, 0x0a,
	0x0c, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0c, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0d, 0x66, 0x6f, 0x72,
	0x65, 0x6d, 0x61, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x46, 0x6f, 0x72, 0x65, 0x6d, 0x61,
	0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0d, 0x66, 0x6f, 0x72, 0x65, 0x6d,
	0x61, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x58, 0x0a, 0x16, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x6e, 0x65, 0x6c, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x6e,
	0x65, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x16, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x6e, 0x65, 0x6c, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x42, 0x11, 0x0a, 0x0f, 0x72, 0x6f, 0x6c, 0x65, 0x42, 0x61, 0x73, 0x65, 0x64, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x62, 0x72, 0x69, 0x67, 0x61, 0x64,
	0x65, 0x49, 0x64, 0x22, 0xf8, 0x04, 0x0a, 0x10, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x57, 0x6f,
	0x72, 0x6b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x72, 0x61,
	0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0d,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x21, 0x0a,
	0x09, 0x62, 0x72, 0x69, 0x67, 0x61, 0x64, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x02, 0x52, 0x09, 0x62, 0x72, 0x69, 0x67, 0x61, 0x64, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x45, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x70,
	0x61, 0x69, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x61,
	0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x03, 0x52, 0x09, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x0b,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x33,
	0x0a, 0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x12, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x75, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x06, 0x52, 0x06, 0x75, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x05, 0x52, 0x03, 0x69,
	0x64, 0x73, 0x1a, 0x77, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x36, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x64,
	0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x32, 0x0a, 0x06, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x06, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x62, 0x72, 0x69, 0x67, 0x61, 0x64, 0x65, 0x49, 0x64, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x42, 0x15, 0x0a, 0x13,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x22, 0x40,
	0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73,
	0x22, 0x32, 0x0a, 0x0e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x49, 0x64, 0x22, 0x21, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x03, 0x69, 0x64, 0x73, 0x2a, 0x70, 0x0a, 0x04, 0x52, 0x6f, 0x6c, 0x65, 0x12,
	0x0b, 0x0a, 0x07, 0x66, 0x6f, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x10,
	0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x69, 0x61, 0x6e, 0x10,
	0x04, 0x12, 0x0a, 0x0a, 0x06, 0x77, 0x65, 0x6c, 0x64, 0x65, 0x72, 0x10, 0x05, 0x12, 0x0d, 0x0a,
	0x09, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x65, 0x72, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07,
	0x70, 0x6c, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x10, 0x07, 0x2a, 0x3d, 0x0a, 0x0b, 0x52, 0x65, 0x70,
	0x61, 0x69, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x69, 0x6e, 0x5f, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x66, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x6e, 0x6f, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x10, 0x02, 0x32, 0xcf, 0x08, 0x0a, 0x0d, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x13, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x6e, 0x69,
	0x74, 0x12, 0x15, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x1a, 0x15, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x22,
	0x00, 0x12, 0x44, 0x0a, 0x12, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x15, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x1a, 0x15,
	0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x55, 0x6e, 0x69, 0x74, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x19, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x2e, 0x70, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x1a, 0x12, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x73,
	0x12, 0x18, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72,
	0x57, 0x6f, 0x72, 0x6b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x16, 0x2e, 0x70, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x44, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x42, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x2e,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0d, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x73, 0x12, 0x15, 0x2e, 0x70,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3f, 0x0a, 0x0e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x72, 0x69, 0x67, 0x61, 0x64, 0x65, 0x73, 0x12, 0x15, 0x2e,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3b, 0x0a, 0x0f,
	0x41, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x12,
	0x12, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x57,
	0x6f, 0x72, 0x6b, 0x1a, 0x12, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x70,
	0x61, 0x69, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x10, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x12, 0x12, 0x2e,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x57, 0x6f, 0x72,
	0x6b, 0x1a, 0x12, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x70, 0x61, 0x69,
	0x72, 0x57, 0x6f, 0x72, 0x6b, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x70, 0x61, 0x69, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x33,
	0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x72, 0x69, 0x67, 0x61, 0x64, 0x65, 0x12,
	0x0f, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x42, 0x72, 0x69, 0x67, 0x61, 0x64, 0x65,
	0x1a, 0x0f, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x42, 0x72, 0x69, 0x67, 0x61, 0x64,
	0x65, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x0c, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x72, 0x69, 0x67,
	0x61, 0x64, 0x65, 0x12, 0x0f, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x42, 0x72, 0x69,
	0x67, 0x61, 0x64, 0x65, 0x1a, 0x0f, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x42, 0x72,
	0x69, 0x67, 0x61, 0x64, 0x65, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x42, 0x72, 0x69, 0x67, 0x61, 0x64, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x13, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x42, 0x72, 0x69, 0x67, 0x61,
	0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x0e, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x1a, 0x0e, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x2f, 0x0a, 0x0b, 0x41, 0x6c,
	0x74, 0x65, 0x72, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x0e, 0x2e, 0x70, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x1a, 0x0e, 0x2e, 0x70, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0d, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x12, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x42, 0x03, 0x5a, 0x01, 0x2e, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_proto_person_service_proto_rawDescOnce sync.Once
	file_proto_person_service_proto_rawDescData []byte
)

func file_proto_person_service_proto_rawDescGZIP() []byte {
	file_proto_person_service_proto_rawDescOnce.Do(func() {
		file_proto_person_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_person_service_proto_rawDesc), len(file_proto_person_service_proto_rawDesc)))
	})
	return file_proto_person_service_proto_rawDescData
}

var file_proto_person_service_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_proto_person_service_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_proto_person_service_proto_goTypes = []any{
	(Role)(0),                          // 0: person.Role
	(RepairState)(0),                   // 1: person.RepairState
	(*TransportUnit)(nil),              // 2: person.TransportUnit
	(*RepairWork)(nil),                 // 3: person.RepairWork
	(*Brigade)(nil),                    // 4: person.Brigade
	(*DriverInfo)(nil),                 // 5: person.DriverInfo
	(*ForemanInfo)(nil),                // 6: person.ForemanInfo
	(*MasterInfo)(nil),                 // 7: person.MasterInfo
	(*ManagerInfo)(nil),                // 8: person.ManagerInfo
	(*AssemblerInfo)(nil),              // 9: person.AssemblerInfo
	(*PlumberInfo)(nil),                // 10: person.PlumberInfo
	(*TechnicianInfo)(nil),             // 11: person.TechnicianInfo
	(*WelderInfo)(nil),                 // 12: person.WelderInfo
	(*Person)(nil),                     // 13: person.Person
	(*PersonList)(nil),                 // 14: person.PersonList
	(*BrigadeList)(nil),                // 15: person.BrigadeList
	(*RepairWorkList)(nil),             // 16: person.RepairWorkList
	(*MasterFilter)(nil),               // 17: person.MasterFilter
	(*ForemanFilter)(nil),              // 18: person.ForemanFilter
	(*ServicePersonnelFilter)(nil),     // 19: person.ServicePersonnelFilter
	(*PersonFilter)(nil),               // 20: person.PersonFilter
	(*RepairWorkFilter)(nil),           // 21: person.RepairWorkFilter
	(*TransportUnitList)(nil),          // 22: person.TransportUnitList
	(*DriversRequest)(nil),             // 23: person.DriversRequest
	(*DeleteRequest)(nil),              // 24: person.DeleteRequest
	(*RepairWorkFilter_DateRange)(nil), // 25: person.RepairWorkFilter.DateRange
	(*timestamppb.Timestamp)(nil),      // 26: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),              // 27: google.protobuf.Empty
}
var file_proto_person_service_proto_depIdxs = []int32{
	26, // 0: person.RepairWork.startTime:type_name -> google.protobuf.Timestamp
	26, // 1: person.RepairWork.endTime:type_name -> google.protobuf.Timestamp
	26, // 2: person.Person.birthDate:type_name -> google.protobuf.Timestamp
	6,  // 3: person.Person.foremanInfo:type_name -> person.ForemanInfo
	7,  // 4: person.Person.masterInfo:type_name -> person.MasterInfo
	8,  // 5: person.Person.managerInfo:type_name -> person.ManagerInfo
	5,  // 6: person.Person.driverInfo:type_name -> person.DriverInfo
	11, // 7: person.Person.technicianInfo:type_name -> person.TechnicianInfo
	12, // 8: person.Person.welderInfo:type_name -> person.WelderInfo
	9,  // 9: person.Person.assemblerInfo:type_name -> person.AssemblerInfo
	10, // 10: person.Person.plumberInfo:type_name -> person.PlumberInfo
	13, // 11: person.PersonList.persons:type_name -> person.Person
	4,  // 12: person.BrigadeList.brigades:type_name -> person.Brigade
	3,  // 13: person.RepairWorkList.repairWorks:type_name -> person.RepairWork
	0,  // 14: person.PersonFilter.roles:type_name -> person.Role
	17, // 15: person.PersonFilter.masterFilter:type_name -> person.MasterFilter
	18, // 16: person.PersonFilter.foremanFilter:type_name -> person.ForemanFilter
	19, // 17: person.PersonFilter.servicePersonnelFilter:type_name -> person.ServicePersonnelFilter
	1,  // 18: person.RepairWorkFilter.states:type_name -> person.RepairState
	25, // 19: person.RepairWorkFilter.dateRange:type_name -> person.RepairWorkFilter.DateRange
	2,  // 20: person.TransportUnitList.units:type_name -> person.TransportUnit
	26, // 21: person.RepairWorkFilter.DateRange.dateFrom:type_name -> google.protobuf.Timestamp
	26, // 22: person.RepairWorkFilter.DateRange.dateTo:type_name -> google.protobuf.Timestamp
	2,  // 23: person.PersonService.CreateTransportUnit:input_type -> person.TransportUnit
	2,  // 24: person.PersonService.AlterTransportUnit:input_type -> person.TransportUnit
	27, // 25: person.PersonService.GetAllTransportUnits:input_type -> google.protobuf.Empty
	20, // 26: person.PersonService.GetFilteredPersons:input_type -> person.PersonFilter
	21, // 27: person.PersonService.GetFilteredRepairWorks:input_type -> person.RepairWorkFilter
	23, // 28: person.PersonService.GetDriversByTransport:input_type -> person.DriversRequest
	24, // 29: person.PersonService.DeletePersons:input_type -> person.DeleteRequest
	24, // 30: person.PersonService.DeleteBrigades:input_type -> person.DeleteRequest
	3,  // 31: person.PersonService.AlterRepairWork:input_type -> person.RepairWork
	3,  // 32: person.PersonService.CreateRepairWork:input_type -> person.RepairWork
	27, // 33: person.PersonService.GetAllRepairWorks:input_type -> google.protobuf.Empty
	4,  // 34: person.PersonService.CreateBrigade:input_type -> person.Brigade
	4,  // 35: person.PersonService.AlterBrigade:input_type -> person.Brigade
	27, // 36: person.PersonService.GetAllBrigades:input_type -> google.protobuf.Empty
	13, // 37: person.PersonService.CreatePerson:input_type -> person.Person
	13, // 38: person.PersonService.AlterPerson:input_type -> person.Person
	27, // 39: person.PersonService.GetAllPersons:input_type -> google.protobuf.Empty
	2,  // 40: person.PersonService.CreateTransportUnit:output_type -> person.TransportUnit
	2,  // 41: person.PersonService.AlterTransportUnit:output_type -> person.TransportUnit
	22, // 42: person.PersonService.GetAllTransportUnits:output_type -> person.TransportUnitList
	14, // 43: person.PersonService.GetFilteredPersons:output_type -> person.PersonList
	16, // 44: person.PersonService.GetFilteredRepairWorks:output_type -> person.RepairWorkList
	14, // 45: person.PersonService.GetDriversByTransport:output_type -> person.PersonList
	27, // 46: person.PersonService.DeletePersons:output_type -> google.protobuf.Empty
	27, // 47: person.PersonService.DeleteBrigades:output_type -> google.protobuf.Empty
	3,  // 48: person.PersonService.AlterRepairWork:output_type -> person.RepairWork
	3,  // 49: person.PersonService.CreateRepairWork:output_type -> person.RepairWork
	16, // 50: person.PersonService.GetAllRepairWorks:output_type -> person.RepairWorkList
	4,  // 51: person.PersonService.CreateBrigade:output_type -> person.Brigade
	4,  // 52: person.PersonService.AlterBrigade:output_type -> person.Brigade
	15, // 53: person.PersonService.GetAllBrigades:output_type -> person.BrigadeList
	13, // 54: person.PersonService.CreatePerson:output_type -> person.Person
	13, // 55: person.PersonService.AlterPerson:output_type -> person.Person
	14, // 56: person.PersonService.GetAllPersons:output_type -> person.PersonList
	40, // [40:57] is the sub-list for method output_type
	23, // [23:40] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_proto_person_service_proto_init() }
func file_proto_person_service_proto_init() {
	if File_proto_person_service_proto != nil {
		return
	}
	file_proto_person_service_proto_msgTypes[0].OneofWrappers = []any{}
	file_proto_person_service_proto_msgTypes[1].OneofWrappers = []any{}
	file_proto_person_service_proto_msgTypes[2].OneofWrappers = []any{}
	file_proto_person_service_proto_msgTypes[3].OneofWrappers = []any{}
	file_proto_person_service_proto_msgTypes[4].OneofWrappers = []any{}
	file_proto_person_service_proto_msgTypes[5].OneofWrappers = []any{}
	file_proto_person_service_proto_msgTypes[7].OneofWrappers = []any{}
	file_proto_person_service_proto_msgTypes[8].OneofWrappers = []any{}
	file_proto_person_service_proto_msgTypes[9].OneofWrappers = []any{}
	file_proto_person_service_proto_msgTypes[10].OneofWrappers = []any{}
	file_proto_person_service_proto_msgTypes[11].OneofWrappers = []any{
		(*Person_ForemanInfo)(nil),
		(*Person_MasterInfo)(nil),
		(*Person_ManagerInfo)(nil),
		(*Person_DriverInfo)(nil),
		(*Person_TechnicianInfo)(nil),
		(*Person_WelderInfo)(nil),
		(*Person_AssemblerInfo)(nil),
		(*Person_PlumberInfo)(nil),
	}
	file_proto_person_service_proto_msgTypes[15].OneofWrappers = []any{}
	file_proto_person_service_proto_msgTypes[16].OneofWrappers = []any{}
	file_proto_person_service_proto_msgTypes[17].OneofWrappers = []any{}
	file_proto_person_service_proto_msgTypes[18].OneofWrappers = []any{
		(*PersonFilter_MasterFilter)(nil),
		(*PersonFilter_ForemanFilter)(nil),
		(*PersonFilter_ServicePersonnelFilter)(nil),
	}
	file_proto_person_service_proto_msgTypes[19].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_person_service_proto_rawDesc), len(file_proto_person_service_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_person_service_proto_goTypes,
		DependencyIndexes: file_proto_person_service_proto_depIdxs,
		EnumInfos:         file_proto_person_service_proto_enumTypes,
		MessageInfos:      file_proto_person_service_proto_msgTypes,
	}.Build()
	File_proto_person_service_proto = out.File
	file_proto_person_service_proto_goTypes = nil
	file_proto_person_service_proto_depIdxs = nil
}
