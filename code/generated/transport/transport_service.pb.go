// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.28.2
// source: proto/transport_service.proto

package __

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TransportType int32

const (
	TransportType_bus        TransportType = 0
	TransportType_taxi       TransportType = 1
	TransportType_tram       TransportType = 2
	TransportType_trolleybus TransportType = 3
	TransportType_truck      TransportType = 4
)

// Enum value maps for TransportType.
var (
	TransportType_name = map[int32]string{
		0: "bus",
		1: "taxi",
		2: "tram",
		3: "trolleybus",
		4: "truck",
	}
	TransportType_value = map[string]int32{
		"bus":        0,
		"taxi":       1,
		"tram":       2,
		"trolleybus": 3,
		"truck":      4,
	}
)

func (x TransportType) Enum() *TransportType {
	p := new(TransportType)
	*p = x
	return p
}

func (x TransportType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransportType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_transport_service_proto_enumTypes[0].Descriptor()
}

func (TransportType) Type() protoreflect.EnumType {
	return &file_proto_transport_service_proto_enumTypes[0]
}

func (x TransportType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransportType.Descriptor instead.
func (TransportType) EnumDescriptor() ([]byte, []int) {
	return file_proto_transport_service_proto_rawDescGZIP(), []int{0}
}

type GarageFacilityType int32

const (
	GarageFacilityType_attached_garage GarageFacilityType = 0
	GarageFacilityType_detached_garage GarageFacilityType = 1
	GarageFacilityType_carport         GarageFacilityType = 2
)

// Enum value maps for GarageFacilityType.
var (
	GarageFacilityType_name = map[int32]string{
		0: "attached_garage",
		1: "detached_garage",
		2: "carport",
	}
	GarageFacilityType_value = map[string]int32{
		"attached_garage": 0,
		"detached_garage": 1,
		"carport":         2,
	}
)

func (x GarageFacilityType) Enum() *GarageFacilityType {
	p := new(GarageFacilityType)
	*p = x
	return p
}

func (x GarageFacilityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GarageFacilityType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_transport_service_proto_enumTypes[1].Descriptor()
}

func (GarageFacilityType) Type() protoreflect.EnumType {
	return &file_proto_transport_service_proto_enumTypes[1]
}

func (x GarageFacilityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GarageFacilityType.Descriptor instead.
func (GarageFacilityType) EnumDescriptor() ([]byte, []int) {
	return file_proto_transport_service_proto_rawDescGZIP(), []int{1}
}

type TransportOperationType int32

const (
	TransportOperationType_purchase  TransportOperationType = 0
	TransportOperationType_write_off TransportOperationType = 1
	TransportOperationType_sale      TransportOperationType = 2
)

// Enum value maps for TransportOperationType.
var (
	TransportOperationType_name = map[int32]string{
		0: "purchase",
		1: "write_off",
		2: "sale",
	}
	TransportOperationType_value = map[string]int32{
		"purchase":  0,
		"write_off": 1,
		"sale":      2,
	}
)

func (x TransportOperationType) Enum() *TransportOperationType {
	p := new(TransportOperationType)
	*p = x
	return p
}

func (x TransportOperationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransportOperationType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_transport_service_proto_enumTypes[2].Descriptor()
}

func (TransportOperationType) Type() protoreflect.EnumType {
	return &file_proto_transport_service_proto_enumTypes[2]
}

func (x TransportOperationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransportOperationType.Descriptor instead.
func (TransportOperationType) EnumDescriptor() ([]byte, []int) {
	return file_proto_transport_service_proto_rawDescGZIP(), []int{2}
}

type TransportOperation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *int32                 `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Type          string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Date          *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=date,proto3" json:"date,omitempty"`
	Description   *string                `protobuf:"bytes,4,opt,name=description,proto3,oneof" json:"description,omitempty"`
	TransportId   *int32                 `protobuf:"varint,5,opt,name=transportId,proto3,oneof" json:"transportId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransportOperation) Reset() {
	*x = TransportOperation{}
	mi := &file_proto_transport_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransportOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransportOperation) ProtoMessage() {}

func (x *TransportOperation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_transport_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransportOperation.ProtoReflect.Descriptor instead.
func (*TransportOperation) Descriptor() ([]byte, []int) {
	return file_proto_transport_service_proto_rawDescGZIP(), []int{0}
}

func (x *TransportOperation) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *TransportOperation) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *TransportOperation) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *TransportOperation) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *TransportOperation) GetTransportId() int32 {
	if x != nil && x.TransportId != nil {
		return *x.TransportId
	}
	return 0
}

type GarageFacility struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *int32                 `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Type          string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Address       string                 `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GarageFacility) Reset() {
	*x = GarageFacility{}
	mi := &file_proto_transport_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GarageFacility) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GarageFacility) ProtoMessage() {}

func (x *GarageFacility) ProtoReflect() protoreflect.Message {
	mi := &file_proto_transport_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GarageFacility.ProtoReflect.Descriptor instead.
func (*GarageFacility) Descriptor() ([]byte, []int) {
	return file_proto_transport_service_proto_rawDescGZIP(), []int{1}
}

func (x *GarageFacility) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *GarageFacility) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GarageFacility) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GarageFacility) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type BusInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PassengersNum int32                  `protobuf:"varint,2,opt,name=passengersNum,proto3" json:"passengersNum,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BusInfo) Reset() {
	*x = BusInfo{}
	mi := &file_proto_transport_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BusInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusInfo) ProtoMessage() {}

func (x *BusInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_transport_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusInfo.ProtoReflect.Descriptor instead.
func (*BusInfo) Descriptor() ([]byte, []int) {
	return file_proto_transport_service_proto_rawDescGZIP(), []int{2}
}

func (x *BusInfo) GetPassengersNum() int32 {
	if x != nil {
		return x.PassengersNum
	}
	return 0
}

type TaxiInfo struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	IsAvailable        bool                   `protobuf:"varint,1,opt,name=isAvailable,proto3" json:"isAvailable,omitempty"`
	YearsOfManufacture int32                  `protobuf:"varint,2,opt,name=yearsOfManufacture,proto3" json:"yearsOfManufacture,omitempty"`
	FuelType           string                 `protobuf:"bytes,3,opt,name=fuelType,proto3" json:"fuelType,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *TaxiInfo) Reset() {
	*x = TaxiInfo{}
	mi := &file_proto_transport_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaxiInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaxiInfo) ProtoMessage() {}

func (x *TaxiInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_transport_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaxiInfo.ProtoReflect.Descriptor instead.
func (*TaxiInfo) Descriptor() ([]byte, []int) {
	return file_proto_transport_service_proto_rawDescGZIP(), []int{3}
}

func (x *TaxiInfo) GetIsAvailable() bool {
	if x != nil {
		return x.IsAvailable
	}
	return false
}

func (x *TaxiInfo) GetYearsOfManufacture() int32 {
	if x != nil {
		return x.YearsOfManufacture
	}
	return 0
}

func (x *TaxiInfo) GetFuelType() string {
	if x != nil {
		return x.FuelType
	}
	return ""
}

type TramInfo struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	PassengersNum      int32                  `protobuf:"varint,2,opt,name=passengersNum,proto3" json:"passengersNum,omitempty"`
	YearsOfManufacture int32                  `protobuf:"varint,3,opt,name=yearsOfManufacture,proto3" json:"yearsOfManufacture,omitempty"`
	IsOperational      bool                   `protobuf:"varint,4,opt,name=isOperational,proto3" json:"isOperational,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *TramInfo) Reset() {
	*x = TramInfo{}
	mi := &file_proto_transport_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TramInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TramInfo) ProtoMessage() {}

func (x *TramInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_transport_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TramInfo.ProtoReflect.Descriptor instead.
func (*TramInfo) Descriptor() ([]byte, []int) {
	return file_proto_transport_service_proto_rawDescGZIP(), []int{4}
}

func (x *TramInfo) GetPassengersNum() int32 {
	if x != nil {
		return x.PassengersNum
	}
	return 0
}

func (x *TramInfo) GetYearsOfManufacture() int32 {
	if x != nil {
		return x.YearsOfManufacture
	}
	return 0
}

func (x *TramInfo) GetIsOperational() bool {
	if x != nil {
		return x.IsOperational
	}
	return false
}

type TrolleybusInfo struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	PassengersNum      int32                  `protobuf:"varint,2,opt,name=passengersNum,proto3" json:"passengersNum,omitempty"`
	YearsOfManufacture int32                  `protobuf:"varint,3,opt,name=yearsOfManufacture,proto3" json:"yearsOfManufacture,omitempty"`
	IsOperational      bool                   `protobuf:"varint,4,opt,name=isOperational,proto3" json:"isOperational,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *TrolleybusInfo) Reset() {
	*x = TrolleybusInfo{}
	mi := &file_proto_transport_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrolleybusInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrolleybusInfo) ProtoMessage() {}

func (x *TrolleybusInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_transport_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrolleybusInfo.ProtoReflect.Descriptor instead.
func (*TrolleybusInfo) Descriptor() ([]byte, []int) {
	return file_proto_transport_service_proto_rawDescGZIP(), []int{5}
}

func (x *TrolleybusInfo) GetPassengersNum() int32 {
	if x != nil {
		return x.PassengersNum
	}
	return 0
}

func (x *TrolleybusInfo) GetYearsOfManufacture() int32 {
	if x != nil {
		return x.YearsOfManufacture
	}
	return 0
}

func (x *TrolleybusInfo) GetIsOperational() bool {
	if x != nil {
		return x.IsOperational
	}
	return false
}

type TruckInfo struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	CargoCapacityKg    float32                `protobuf:"fixed32,2,opt,name=cargoCapacityKg,proto3" json:"cargoCapacityKg,omitempty"`
	FuelConsumption    float32                `protobuf:"fixed32,3,opt,name=fuelConsumption,proto3" json:"fuelConsumption,omitempty"`
	TruckType          string                 `protobuf:"bytes,4,opt,name=truckType,proto3" json:"truckType,omitempty"`
	YearsOfManufacture int32                  `protobuf:"varint,5,opt,name=yearsOfManufacture,proto3" json:"yearsOfManufacture,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *TruckInfo) Reset() {
	*x = TruckInfo{}
	mi := &file_proto_transport_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TruckInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TruckInfo) ProtoMessage() {}

func (x *TruckInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_transport_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TruckInfo.ProtoReflect.Descriptor instead.
func (*TruckInfo) Descriptor() ([]byte, []int) {
	return file_proto_transport_service_proto_rawDescGZIP(), []int{6}
}

func (x *TruckInfo) GetCargoCapacityKg() float32 {
	if x != nil {
		return x.CargoCapacityKg
	}
	return 0
}

func (x *TruckInfo) GetFuelConsumption() float32 {
	if x != nil {
		return x.FuelConsumption
	}
	return 0
}

func (x *TruckInfo) GetTruckType() string {
	if x != nil {
		return x.TruckType
	}
	return ""
}

func (x *TruckInfo) GetYearsOfManufacture() int32 {
	if x != nil {
		return x.YearsOfManufacture
	}
	return 0
}

type Transport struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Id               *int32                 `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Type             string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Brand            string                 `protobuf:"bytes,3,opt,name=brand,proto3" json:"brand,omitempty"`
	GarageFacilityId *int32                 `protobuf:"varint,4,opt,name=garageFacilityId,proto3,oneof" json:"garageFacilityId,omitempty"`
	LicensePlate     string                 `protobuf:"bytes,5,opt,name=licensePlate,proto3" json:"licensePlate,omitempty"`
	Name             string                 `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are valid to be assigned to TransportInfo:
	//
	//	*Transport_BusInfo
	//	*Transport_TaxiInfo
	//	*Transport_TramInfo
	//	*Transport_TrolleybusInfo
	//	*Transport_TruckInfo
	TransportInfo isTransport_TransportInfo `protobuf_oneof:"transportInfo"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Transport) Reset() {
	*x = Transport{}
	mi := &file_proto_transport_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Transport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transport) ProtoMessage() {}

func (x *Transport) ProtoReflect() protoreflect.Message {
	mi := &file_proto_transport_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transport.ProtoReflect.Descriptor instead.
func (*Transport) Descriptor() ([]byte, []int) {
	return file_proto_transport_service_proto_rawDescGZIP(), []int{7}
}

func (x *Transport) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Transport) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Transport) GetBrand() string {
	if x != nil {
		return x.Brand
	}
	return ""
}

func (x *Transport) GetGarageFacilityId() int32 {
	if x != nil && x.GarageFacilityId != nil {
		return *x.GarageFacilityId
	}
	return 0
}

func (x *Transport) GetLicensePlate() string {
	if x != nil {
		return x.LicensePlate
	}
	return ""
}

func (x *Transport) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Transport) GetTransportInfo() isTransport_TransportInfo {
	if x != nil {
		return x.TransportInfo
	}
	return nil
}

func (x *Transport) GetBusInfo() *BusInfo {
	if x != nil {
		if x, ok := x.TransportInfo.(*Transport_BusInfo); ok {
			return x.BusInfo
		}
	}
	return nil
}

func (x *Transport) GetTaxiInfo() *TaxiInfo {
	if x != nil {
		if x, ok := x.TransportInfo.(*Transport_TaxiInfo); ok {
			return x.TaxiInfo
		}
	}
	return nil
}

func (x *Transport) GetTramInfo() *TramInfo {
	if x != nil {
		if x, ok := x.TransportInfo.(*Transport_TramInfo); ok {
			return x.TramInfo
		}
	}
	return nil
}

func (x *Transport) GetTrolleybusInfo() *TrolleybusInfo {
	if x != nil {
		if x, ok := x.TransportInfo.(*Transport_TrolleybusInfo); ok {
			return x.TrolleybusInfo
		}
	}
	return nil
}

func (x *Transport) GetTruckInfo() *TruckInfo {
	if x != nil {
		if x, ok := x.TransportInfo.(*Transport_TruckInfo); ok {
			return x.TruckInfo
		}
	}
	return nil
}

type isTransport_TransportInfo interface {
	isTransport_TransportInfo()
}

type Transport_BusInfo struct {
	BusInfo *BusInfo `protobuf:"bytes,10,opt,name=busInfo,proto3,oneof"`
}

type Transport_TaxiInfo struct {
	TaxiInfo *TaxiInfo `protobuf:"bytes,11,opt,name=taxiInfo,proto3,oneof"`
}

type Transport_TramInfo struct {
	TramInfo *TramInfo `protobuf:"bytes,7,opt,name=tramInfo,proto3,oneof"`
}

type Transport_TrolleybusInfo struct {
	TrolleybusInfo *TrolleybusInfo `protobuf:"bytes,8,opt,name=trolleybusInfo,proto3,oneof"`
}

type Transport_TruckInfo struct {
	TruckInfo *TruckInfo `protobuf:"bytes,9,opt,name=truckInfo,proto3,oneof"`
}

func (*Transport_BusInfo) isTransport_TransportInfo() {}

func (*Transport_TaxiInfo) isTransport_TransportInfo() {}

func (*Transport_TramInfo) isTransport_TransportInfo() {}

func (*Transport_TrolleybusInfo) isTransport_TransportInfo() {}

func (*Transport_TruckInfo) isTransport_TransportInfo() {}

type TransportList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Transports    []*Transport           `protobuf:"bytes,1,rep,name=transports,proto3" json:"transports,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransportList) Reset() {
	*x = TransportList{}
	mi := &file_proto_transport_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransportList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransportList) ProtoMessage() {}

func (x *TransportList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_transport_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransportList.ProtoReflect.Descriptor instead.
func (*TransportList) Descriptor() ([]byte, []int) {
	return file_proto_transport_service_proto_rawDescGZIP(), []int{8}
}

func (x *TransportList) GetTransports() []*Transport {
	if x != nil {
		return x.Transports
	}
	return nil
}

type GarageFacilityList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Garages       []*GarageFacility      `protobuf:"bytes,1,rep,name=garages,proto3" json:"garages,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GarageFacilityList) Reset() {
	*x = GarageFacilityList{}
	mi := &file_proto_transport_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GarageFacilityList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GarageFacilityList) ProtoMessage() {}

func (x *GarageFacilityList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_transport_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GarageFacilityList.ProtoReflect.Descriptor instead.
func (*GarageFacilityList) Descriptor() ([]byte, []int) {
	return file_proto_transport_service_proto_rawDescGZIP(), []int{9}
}

func (x *GarageFacilityList) GetGarages() []*GarageFacility {
	if x != nil {
		return x.Garages
	}
	return nil
}

type TransportOperationList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Operations    []*TransportOperation  `protobuf:"bytes,1,rep,name=operations,proto3" json:"operations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransportOperationList) Reset() {
	*x = TransportOperationList{}
	mi := &file_proto_transport_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransportOperationList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransportOperationList) ProtoMessage() {}

func (x *TransportOperationList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_transport_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransportOperationList.ProtoReflect.Descriptor instead.
func (*TransportOperationList) Descriptor() ([]byte, []int) {
	return file_proto_transport_service_proto_rawDescGZIP(), []int{10}
}

func (x *TransportOperationList) GetOperations() []*TransportOperation {
	if x != nil {
		return x.Operations
	}
	return nil
}

type TransportFilter struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	RouteId          *int32                 `protobuf:"varint,1,opt,name=routeId,proto3,oneof" json:"routeId,omitempty"`
	GarageFacilityId *int32                 `protobuf:"varint,2,opt,name=garageFacilityId,proto3,oneof" json:"garageFacilityId,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *TransportFilter) Reset() {
	*x = TransportFilter{}
	mi := &file_proto_transport_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransportFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransportFilter) ProtoMessage() {}

func (x *TransportFilter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_transport_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransportFilter.ProtoReflect.Descriptor instead.
func (*TransportFilter) Descriptor() ([]byte, []int) {
	return file_proto_transport_service_proto_rawDescGZIP(), []int{11}
}

func (x *TransportFilter) GetRouteId() int32 {
	if x != nil && x.RouteId != nil {
		return *x.RouteId
	}
	return 0
}

func (x *TransportFilter) GetGarageFacilityId() int32 {
	if x != nil && x.GarageFacilityId != nil {
		return *x.GarageFacilityId
	}
	return 0
}

var File_proto_transport_service_proto protoreflect.FileDescriptor

var file_proto_transport_service_proto_rawDesc = string([]byte{
	0x0a, 0x1d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x04, 0x6d, 0x61, 0x69, 0x6e, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xe2, 0x01, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x02, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x22, 0x6e, 0x0a, 0x0e, 0x47, 0x61, 0x72, 0x61,
	0x67, 0x65, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x22, 0x2f, 0x0a, 0x07, 0x42, 0x75, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72,
	0x73, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x61, 0x73, 0x73,
	0x65, 0x6e, 0x67, 0x65, 0x72, 0x73, 0x4e, 0x75, 0x6d, 0x22, 0x78, 0x0a, 0x08, 0x54, 0x61, 0x78,
	0x69, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x79, 0x65, 0x61, 0x72, 0x73,
	0x4f, 0x66, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x12, 0x79, 0x65, 0x61, 0x72, 0x73, 0x4f, 0x66, 0x4d, 0x61, 0x6e, 0x75,
	0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x65, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x65, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x24, 0x0a, 0x0d, 0x70, 0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x73, 0x4e, 0x75,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x61, 0x73, 0x73, 0x65, 0x6e, 0x67,
	0x65, 0x72, 0x73, 0x4e, 0x75, 0x6d, 0x12, 0x2e, 0x0a, 0x12, 0x79, 0x65, 0x61, 0x72, 0x73, 0x4f,
	0x66, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x12, 0x79, 0x65, 0x61, 0x72, 0x73, 0x4f, 0x66, 0x4d, 0x61, 0x6e, 0x75, 0x66,
	0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69,
	0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0x8c, 0x01, 0x0a,
	0x0e, 0x54, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x79, 0x62, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x24, 0x0a, 0x0d, 0x70, 0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x73, 0x4e, 0x75, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65,
	0x72, 0x73, 0x4e, 0x75, 0x6d, 0x12, 0x2e, 0x0a, 0x12, 0x79, 0x65, 0x61, 0x72, 0x73, 0x4f, 0x66,
	0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x12, 0x79, 0x65, 0x61, 0x72, 0x73, 0x4f, 0x66, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0xad, 0x01, 0x0a, 0x09,
	0x54, 0x72, 0x75, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x61, 0x72,
	0x67, 0x6f, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x4b, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0f, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x4b, 0x67, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x75, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x66, 0x75,
	0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x72, 0x75, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x74, 0x72, 0x75, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x79,
	0x65, 0x61, 0x72, 0x73, 0x4f, 0x66, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x79, 0x65, 0x61, 0x72, 0x73, 0x4f, 0x66,
	0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x22, 0xd8, 0x03, 0x0a, 0x09,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x2f, 0x0a, 0x10, 0x67, 0x61, 0x72, 0x61,
	0x67, 0x65, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x02, 0x52, 0x10, 0x67, 0x61, 0x72, 0x61, 0x67, 0x65, 0x46, 0x61, 0x63, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x29, 0x0a, 0x07, 0x62, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x42, 0x75, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x48, 0x00, 0x52, 0x07, 0x62, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x08,
	0x74, 0x61, 0x78, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x61, 0x78, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00,
	0x52, 0x08, 0x74, 0x61, 0x78, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x08, 0x74, 0x72,
	0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x08,
	0x74, 0x72, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3e, 0x0a, 0x0e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x79, 0x62, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x79, 0x62,
	0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x79, 0x62, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2f, 0x0a, 0x09, 0x74, 0x72, 0x75, 0x63,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x54, 0x72, 0x75, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x09,
	0x74, 0x72, 0x75, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69,
	0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x67, 0x61, 0x72, 0x61, 0x67, 0x65, 0x46, 0x61, 0x63, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0x40, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0a, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x22, 0x44, 0x0a, 0x12, 0x47, 0x61, 0x72, 0x61,
	0x67, 0x65, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e,
	0x0a, 0x07, 0x67, 0x61, 0x72, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x47, 0x61, 0x72, 0x61, 0x67, 0x65, 0x46, 0x61, 0x63,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x07, 0x67, 0x61, 0x72, 0x61, 0x67, 0x65, 0x73, 0x22, 0x52,
	0x0a, 0x16, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x82, 0x01, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x67, 0x61, 0x72, 0x61, 0x67, 0x65, 0x46,
	0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x01, 0x52, 0x10, 0x67, 0x61, 0x72, 0x61, 0x67, 0x65, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x49, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x67, 0x61, 0x72, 0x61, 0x67, 0x65, 0x46, 0x61, 0x63,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x2a, 0x47, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x62, 0x75, 0x73, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x74, 0x61, 0x78, 0x69, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x74,
	0x72, 0x61, 0x6d, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x79,
	0x62, 0x75, 0x73, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x74, 0x72, 0x75, 0x63, 0x6b, 0x10, 0x04,
	0x2a, 0x4b, 0x0a, 0x12, 0x47, 0x61, 0x72, 0x61, 0x67, 0x65, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x65, 0x64, 0x5f, 0x67, 0x61, 0x72, 0x61, 0x67, 0x65, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x64,
	0x65, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x67, 0x61, 0x72, 0x61, 0x67, 0x65, 0x10, 0x01,
	0x12, 0x0b, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x10, 0x02, 0x2a, 0x3f, 0x0a,
	0x16, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x70, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x6f,
	0x66, 0x66, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x73, 0x61, 0x6c, 0x65, 0x10, 0x02, 0x32, 0xa5,
	0x05, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x4a, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x1c, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12,
	0x47, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x18, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x18, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0e, 0x41, 0x6c, 0x74, 0x65,
	0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x18, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00,
	0x12, 0x43, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x47, 0x61, 0x72, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x18, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x47, 0x61, 0x72, 0x61, 0x67, 0x65, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0b, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x47, 0x61,
	0x72, 0x61, 0x67, 0x65, 0x12, 0x14, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x47, 0x61, 0x72, 0x61,
	0x67, 0x65, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x1a, 0x14, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x47, 0x61, 0x72, 0x61, 0x67, 0x65, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x61, 0x72, 0x61,
	0x67, 0x65, 0x12, 0x14, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x47, 0x61, 0x72, 0x61, 0x67, 0x65,
	0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x1a, 0x14, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x47, 0x61, 0x72, 0x61, 0x67, 0x65, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x44, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x15, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a,
	0x13, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x0f, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0x0f, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x00, 0x12, 0x34, 0x0a,
	0x0e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x0f, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x1a, 0x0f, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x13, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x42, 0x03, 0x5a, 0x01, 0x2e, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
})

var (
	file_proto_transport_service_proto_rawDescOnce sync.Once
	file_proto_transport_service_proto_rawDescData []byte
)

func file_proto_transport_service_proto_rawDescGZIP() []byte {
	file_proto_transport_service_proto_rawDescOnce.Do(func() {
		file_proto_transport_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_transport_service_proto_rawDesc), len(file_proto_transport_service_proto_rawDesc)))
	})
	return file_proto_transport_service_proto_rawDescData
}

var file_proto_transport_service_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_proto_transport_service_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_proto_transport_service_proto_goTypes = []any{
	(TransportType)(0),             // 0: main.TransportType
	(GarageFacilityType)(0),        // 1: main.GarageFacilityType
	(TransportOperationType)(0),    // 2: main.TransportOperationType
	(*TransportOperation)(nil),     // 3: main.TransportOperation
	(*GarageFacility)(nil),         // 4: main.GarageFacility
	(*BusInfo)(nil),                // 5: main.BusInfo
	(*TaxiInfo)(nil),               // 6: main.TaxiInfo
	(*TramInfo)(nil),               // 7: main.TramInfo
	(*TrolleybusInfo)(nil),         // 8: main.TrolleybusInfo
	(*TruckInfo)(nil),              // 9: main.TruckInfo
	(*Transport)(nil),              // 10: main.Transport
	(*TransportList)(nil),          // 11: main.TransportList
	(*GarageFacilityList)(nil),     // 12: main.GarageFacilityList
	(*TransportOperationList)(nil), // 13: main.TransportOperationList
	(*TransportFilter)(nil),        // 14: main.TransportFilter
	(*timestamppb.Timestamp)(nil),  // 15: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),          // 16: google.protobuf.Empty
}
var file_proto_transport_service_proto_depIdxs = []int32{
	15, // 0: main.TransportOperation.date:type_name -> google.protobuf.Timestamp
	5,  // 1: main.Transport.busInfo:type_name -> main.BusInfo
	6,  // 2: main.Transport.taxiInfo:type_name -> main.TaxiInfo
	7,  // 3: main.Transport.tramInfo:type_name -> main.TramInfo
	8,  // 4: main.Transport.trolleybusInfo:type_name -> main.TrolleybusInfo
	9,  // 5: main.Transport.truckInfo:type_name -> main.TruckInfo
	10, // 6: main.TransportList.transports:type_name -> main.Transport
	4,  // 7: main.GarageFacilityList.garages:type_name -> main.GarageFacility
	3,  // 8: main.TransportOperationList.operations:type_name -> main.TransportOperation
	16, // 9: main.TransportService.GetAllOperations:input_type -> google.protobuf.Empty
	3,  // 10: main.TransportService.CreateOperation:input_type -> main.TransportOperation
	3,  // 11: main.TransportService.AlterOperation:input_type -> main.TransportOperation
	16, // 12: main.TransportService.GetAllGarages:input_type -> google.protobuf.Empty
	4,  // 13: main.TransportService.AlterGarage:input_type -> main.GarageFacility
	4,  // 14: main.TransportService.CreateGarage:input_type -> main.GarageFacility
	14, // 15: main.TransportService.GetFilteredTransport:input_type -> main.TransportFilter
	10, // 16: main.TransportService.CreateTransport:input_type -> main.Transport
	10, // 17: main.TransportService.AlterTransport:input_type -> main.Transport
	16, // 18: main.TransportService.GetAllTransports:input_type -> google.protobuf.Empty
	13, // 19: main.TransportService.GetAllOperations:output_type -> main.TransportOperationList
	3,  // 20: main.TransportService.CreateOperation:output_type -> main.TransportOperation
	3,  // 21: main.TransportService.AlterOperation:output_type -> main.TransportOperation
	12, // 22: main.TransportService.GetAllGarages:output_type -> main.GarageFacilityList
	4,  // 23: main.TransportService.AlterGarage:output_type -> main.GarageFacility
	4,  // 24: main.TransportService.CreateGarage:output_type -> main.GarageFacility
	11, // 25: main.TransportService.GetFilteredTransport:output_type -> main.TransportList
	10, // 26: main.TransportService.CreateTransport:output_type -> main.Transport
	10, // 27: main.TransportService.AlterTransport:output_type -> main.Transport
	11, // 28: main.TransportService.GetAllTransports:output_type -> main.TransportList
	19, // [19:29] is the sub-list for method output_type
	9,  // [9:19] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_proto_transport_service_proto_init() }
func file_proto_transport_service_proto_init() {
	if File_proto_transport_service_proto != nil {
		return
	}
	file_proto_transport_service_proto_msgTypes[0].OneofWrappers = []any{}
	file_proto_transport_service_proto_msgTypes[1].OneofWrappers = []any{}
	file_proto_transport_service_proto_msgTypes[7].OneofWrappers = []any{
		(*Transport_BusInfo)(nil),
		(*Transport_TaxiInfo)(nil),
		(*Transport_TramInfo)(nil),
		(*Transport_TrolleybusInfo)(nil),
		(*Transport_TruckInfo)(nil),
	}
	file_proto_transport_service_proto_msgTypes[11].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_transport_service_proto_rawDesc), len(file_proto_transport_service_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_transport_service_proto_goTypes,
		DependencyIndexes: file_proto_transport_service_proto_depIdxs,
		EnumInfos:         file_proto_transport_service_proto_enumTypes,
		MessageInfos:      file_proto_transport_service_proto_msgTypes,
	}.Build()
	File_proto_transport_service_proto = out.File
	file_proto_transport_service_proto_goTypes = nil
	file_proto_transport_service_proto_depIdxs = nil
}
